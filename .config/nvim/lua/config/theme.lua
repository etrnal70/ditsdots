local cmd = vim.api.nvim_command

vim.g.substrata_italic_comments = true
vim.g.substrata_italic_booleans = true
vim.g.substrata_italic_functions = true
vim.g.substrata_transparent = true
cmd("colorscheme substrata")

local hl = function(name, opts)
  vim.api.nvim_set_hl(0, name, opts)
end

hl("Normal", { bg = nil })
hl("NormalFloat", { bg = "#222222" })
hl("FloatBorder", { bg = "#222222" })
hl("LineNr", { fg = "#4F4F4F", bg = nil })
hl("CursorLineNr", { fg = "white", bg = nil })
hl("SignColumn", { fg = nil, bg = nil })
hl("EndOfBuffer", { bg = nil })
hl("ModeMsg", { fg = "white" })
hl("Folded", { fg = "#FAB863", bg = "#222222" })
hl("StatusLine", { fg = nil, bg = "#1F1F1F" })
hl("StatusLineTerm", { fg = nil, bg = "#1F1F1F" })
hl("StatusLineNC", { fg = nil, bg = "#1F1F1E" })
hl("StatusLineTermNC", { fg = nil, bg = "#1F1F1E" })
hl("WinSeparator", { fg = "#2F2F2F", bg = nil })
hl("DiffAdd", { fg = "#92C47E" })
hl("DiffChange", { fg = "#A0B9D8" })
hl("DiffDelete", { fg = "#FE9F7C" })

-- Telescope
hl("TelescopeNormal", { bg = "#1F1F1F" })
hl("TelescopePromptNormal", { bg = "#2F2F2F" })
hl("TelescopeBorder", { bg = "#1F1F1F" })
hl("TelescopePreviewBorder", { fg = "#1F1F1F", bg = "#1F1F1F" })
hl("TelescopePromptBorder", { fg = "#2F2F2F", bg = "#2F2F2F" })
hl("TelescopeResultsBorder", { fg = "#1F1F1F", bg = "#1F1F1F" })
hl("TelescopeTitle", { fg = "#1F1F1F", bg = "#A0B9D8" })
hl("TelescopePreviewTitle", { fg = "#1F1F1F", bg = "#A0B9D8" })
hl("TelescopePromptTitle", { fg = "#1F1F1F", bg = "#A0B9D8" })
hl("TelescopePromptCounter", { fg = "#A0B9D8" })
hl("TelescopePromptPrefix", { fg = "#A0B9D8" })

-- Completion-related
hl("Pmenu", { bg = "#292927" })
hl("PmenuSel", { fg = nil, bg = "#393937" })
hl("CmpItemAbbrMatch", { fg = "#A0B9D8" })
hl("CmpItemAbbrMatchFuzzy", { fg = "#CF8164" })
hl("CmpItemAbbr", { fg = "#777777" })
hl("CmpItemKindText", { italic = true, bg = nil, fg = "#CDD3DE" })
hl("CmpItemKindMethod", { italic = true, bg = nil, fg = "#6699CC" })
hl("CmpItemKindFunction", { italic = true, bg = nil, fg = "#FAB863" })
hl("CmpItemKindConstructor", { italic = true, bg = nil, fg = "#EC5F67" })
hl("CmpItemKindField", { italic = true, bg = nil, fg = "#6699CC" })
hl("CmpItemKindVariable", { italic = true, bg = nil, fg = "#62B3B2" })
hl("CmpItemKindClass", { italic = true, bg = nil, fg = "#7DC030" })
hl("CmpItemKindInterface", { italic = true, bg = nil, fg = "#F99157" })
hl("CmpItemKindModule", { italic = true, bg = nil, fg = "#F99157" })
hl("CmpItemKindProperty", { italic = true, bg = nil, fg = "#6699CC" })
hl("CmpItemKindUnit", { italic = true, bg = nil, fg = "#6699CC" })
hl("CmpItemKindValue", { italic = true, bg = nil, fg = "#C3D2DF" })
hl("CmpItemKindEnum", { italic = true, bg = nil, fg = "#F99157" })
hl("CmpItemKindKeyword", { italic = true, bg = nil, fg = "#99C794" })
hl("CmpItemKindSnippet", { italic = true, bg = nil, fg = "#FAC863" })
hl("CmpItemKindColor", { italic = true, bg = nil, fg = "#C3D2DF" })
hl("CmpItemKindFile", { italic = true, bg = nil, fg = "#C584C5" })
hl("CmpItemKindReference", { italic = true, bg = nil, fg = "#62B3B2" })
hl("CmpItemKindFolder", { italic = true, bg = nil, fg = "#C574C5" })
hl("CmpItemKindEnumMember", { italic = true, bg = nil, fg = "#6699CC" })
hl("CmpItemKindConstant", { italic = true, bg = nil, fg = "#C3D2DF" })
hl("CmpItemKindStruct", { italic = true, bg = nil, fg = "#EC5F67" })
hl("CmpItemKindEvent", { italic = true, bg = nil, fg = "#62B3B2" })
hl("CmpItemKindOperator", { italic = true, bg = nil, fg = "#65737E" })
hl("CmpItemKindTypeParameter", { italic = true, bg = nil, fg = "#6699CC" })

-- Semantic Tokens
hl("LspNamespace", { link = "TSNamespace" })
hl("LspType", { link = "TSType" })
hl("LspClass", { link = "TSClass" })
hl("LspEnum", { link = "TSEnum" })
hl("LspInterface", { link = "TSInterface" })
hl("LspStruct", { link = "Structure" })
hl("LspTypeParameter", { link = "TSParameter" })
hl("LspParameter", { link = "TSParameter" })
hl("LspVariable", { link = "TSVariable" })
hl("LspProperty", { link = "TSProperty" })
hl("LspEnumMember", { link = "Constant" })
hl("LspEvent", { link = "Keyword" })
hl("LspFunction", { link = "TSFunction" })
hl("LspMethod", { link = "TSMethod" })
hl("LspMacro", { link = "TSFuncMacro" })
hl("LspKeyword", { link = "TSKeyword" })
hl("LspModifier", { link = "StorageClass" })
hl("LspComment", { link = "TSComment" })
hl("LspString", { link = "TSString" })
hl("LspNumber", { link = "TSNumber" })
hl("LspRegexp", { link = "TSStringRegex" })
hl("LspOperator", { link = "TSOperator" })

-- LSP-related
hl("LspReferenceRead", { link = "CursorLine" })
hl("LspReferenceText", { link = "CursorLine" })
hl("LspReferenceWrite", { link = "CursorLine" })
hl("LspCodeLens", { fg = "#666666", bold = true })
hl("LspCodeLensText", { link = "LspCodeLens" })
hl("LspCodeLensTextSign", { fg = "#777777" })
hl("LspCodeLensSeparator", { fg = "#333333", bold = true })
hl("LspCodeLensTextSeparator", { link = "LspCodeLensSeparator" })

-- git-messenger
hl("gitMessengerPopupNormal", { link = "NormalFloat" })

--nvim-tree.lua
hl("NvimTreeFolderIcon", { fg = "gray" })
